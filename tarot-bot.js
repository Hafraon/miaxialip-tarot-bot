// –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–∞—Ä–æ MiaxiaLip - –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–Ø + –§–û–†–ú–ê –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
// –†–æ–ª—å: –∑–±—ñ—Ä –ª—ñ–¥—ñ–≤, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏, –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É, –ü–†–ò–ô–û–ú –ó–ê–ú–û–í–õ–ï–ù–¨
// –ó–∞–ø—É—Å–∫: node tarot-bot.js

const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs').promises;
const path = require('path');

// –ë–µ–∑–ø–µ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
let chatGPTIntegration = null;
try {
    chatGPTIntegration = require('./chatgpt-integration');
    console.log('‚úÖ ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
} catch (error) {
    console.log('‚ö†Ô∏è ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏
    chatGPTIntegration = {
        scheduleSmartPosts: () => console.log('ChatGPT –∞–≤—Ç–æ–ø–æ—Å—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ'),
        testChatGPT: (bot, chatId) => {
            console.log('‚ö†Ô∏è ChatGPT —Ç–µ—Å—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π - –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return Promise.resolve(false);
        },
        sendSmartPost: () => Promise.resolve(false),
        getChatGPTStats: () => ({ successRate: 0 })
    };
}

const { 
    scheduleSmartPosts, 
    testChatGPT, 
    sendSmartPost,
    getChatGPTStats 
} = chatGPTIntegration;

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ —Ñ—É—Ç–µ—Ä–∞ –¥–æ –ø–æ—Å—Ç—ñ–≤
function addMandatoryFooter(postText) {
    if (!postText || typeof postText !== 'string') return postText;
    
    const footer = `
üîÆ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:
üåê theglamstyle.com.ua
üì± Instagram: @miaxialip
ü§ñ Telegram –±–æ—Ç: @miaxialiptarotbot`;
    
    // –ó–ê–í–ñ–î–ò –¥–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —É–∂–µ —î
    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏, —è–∫—â–æ —î
    let cleanText = postText;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ —Å—Ç–∞—Ä—ñ —Ñ—É—Ç–µ—Ä–∏
    cleanText = cleanText.replace(/üîÆ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:[\s\S]*$/g, '');
    cleanText = cleanText.replace(/theglamstyle\.com\.ua[\s\S]*$/g, '');
    cleanText = cleanText.replace(/@miaxialip[\s\S]*$/g, '');
    cleanText = cleanText.replace(/@miaxialiptarotbot[\s\S]*$/g, '');
    
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –≤ –∫—ñ–Ω—Ü—ñ
    cleanText = cleanText.trim();
    
    return cleanText + footer;
}

// –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ñ—É—Ç–µ—Ä–æ–º
async function sendSmartPostWithFooter(bot, channelId) {
    try {
        if (!sendSmartPost || typeof sendSmartPost !== 'function') {
            console.log('‚ö†Ô∏è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—ñ–≤');
            return false;
        }
        
        const result = await sendSmartPost(bot, channelId);
        
        // –ó–ê–í–ñ–î–ò –¥–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        if (result && typeof result === 'string') {
            console.log('üì¨ –î–æ–¥–∞—é –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ –ø–æ—Å—Ç–∞...');
            const correctedPost = addMandatoryFooter(result);
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—Å—Ç
            await bot.sendMessage(channelId, correctedPost);
            return correctedPost;
        }
        
        return result;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞:', error);
        return false;
    }
}

// –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
function scheduleSmartPostsWithFooter(bot, channelId) {
    try {
        if (!scheduleSmartPosts) {
            console.log('‚ö†Ô∏è ChatGPT –∞–≤—Ç–æ–ø–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
            return;
        }
        
        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é sendSmartPost –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è cron –∑–∞–≤–¥–∞–Ω—å
        if (chatGPTIntegration && chatGPTIntegration.sendSmartPost) {
            const originalSendSmartPost = chatGPTIntegration.sendSmartPost;
            chatGPTIntegration.sendSmartPost = async (bot, channelId) => {
                console.log('ü§ñ –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–≤—Ç–æ–ø–æ—Å—Ç...');
                const result = await originalSendSmartPost(bot, channelId);
                
                // –ó–ê–í–ñ–î–ò –¥–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤
                if (result && typeof result === 'string') {
                    console.log('üì¨ –î–æ–¥–∞—é –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞...');
                    const correctedPost = addMandatoryFooter(result);
                    await bot.sendMessage(channelId, correctedPost);
                    return correctedPost;
                }
                return result;
            };
        }
        
        scheduleSmartPosts(bot, channelId);
        console.log('‚úÖ ChatGPT –∞–≤—Ç–æ–ø–æ—Å—Ç–∏ –∑ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∞–∫—Ç–∏–≤–Ω—ñ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤:', error);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
let config;
try {
    config = require('./config');
    console.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è config.js:');
    console.error('–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª config.js –Ω–∞ –æ—Å–Ω–æ–≤—ñ config-template.js');
    console.error('–î–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤ README –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó');
    process.exit(1);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const BOT_TOKEN = config.telegram.botToken;
const ADMIN_CHAT_ID = config.telegram.adminChatId;
// –ó–ú–Ü–ù–ï–ù–û: –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª –ú—ñ–∞ –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ
const CHANNEL_ID = '@miaxiataro'; // https://t.me/miaxiataro

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
if (!BOT_TOKEN || BOT_TOKEN === '–í–°–¢–ê–í–¢–ï_–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–°–Æ–î–ò') {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.js');
    process.exit(1);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ª—ñ–¥—ñ–≤ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
let users = new Map();
let leads = new Map();
let orders = new Map(); // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å
let userSessions = new Map();

// –°—Ç–∞–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const ORDER_STATES = {
    WAITING_NAME: 'waiting_name',
    WAITING_PHONE: 'waiting_phone', 
    WAITING_SERVICE: 'waiting_service',
    WAITING_INSTAGRAM: 'waiting_instagram',
    CONFIRMING: 'confirming'
};

// –ö–∞—Ä—Ç–∫–∏ –¢–∞—Ä–æ –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
const tarotCards = [
    { name: "–î—É—Ä–µ–Ω—å", meaning: "–ù–æ–≤—ñ –ø–æ—á–∞—Ç–∫–∏, —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ—Å—Ç—å, –Ω–µ–≤–∏–Ω–Ω—ñ—Å—Ç—å", emoji: "üÉè" },
    { name: "–ú–∞–≥", meaning: "–í–æ–ª—è, –ø—Ä–æ—è–≤, —Ä–µ—Å—É—Ä—Å–∏", emoji: "üé©" },
    { name: "–í–µ—Ä—Ö–æ–≤–Ω–∞ –∂—Ä–∏—Ü—è", meaning: "–Ü–Ω—Ç—É—ó—Ü—ñ—è, –ø—ñ–¥—Å–≤—ñ–¥–æ–º–µ, –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –º—É–¥—Ä—ñ—Å—Ç—å", emoji: "üåô" },
    { name: "–Ü–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü—è", meaning: "–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ø–ª–æ–¥—é—á—ñ—Å—Ç—å, –ø—Ä–∏—Ä–æ–¥–∞", emoji: "üëë" },
    { name: "–Ü–º–ø–µ—Ä–∞—Ç–æ—Ä", meaning: "–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å", emoji: "‚öúÔ∏è" },
    { name: "–Ü—î—Ä–æ—Ñ–∞–Ω—Ç", meaning: "–¢—Ä–∞–¥–∏—Ü—ñ—ó, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –Ω–æ—Ä–º–∏, –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å", emoji: "‚õ™" },
    { name: "–ó–∞–∫–æ—Ö–∞–Ω—ñ", meaning: "–õ—é–±–æ–≤, –≥–∞—Ä–º–æ–Ω—ñ—è, —Å—Ç–æ—Å—É–Ω–∫–∏", emoji: "üíù" },
    { name: "–ö–æ–ª—ñ—Å–Ω–∏—Ü—è", meaning: "–ö–æ–Ω—Ç—Ä–æ–ª—å, –≤–æ–ª—è –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å", emoji: "üèÜ" },
    { name: "–°–∏–ª–∞", meaning: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è —Å–∏–ª–∞, —Ç–µ—Ä–ø—ñ–Ω–Ω—è, —Å–ø—ñ–≤—á—É—Ç—Ç—è", emoji: "üí™" },
    { name: "–í—ñ–¥–ª—é–¥–Ω–∏–∫", meaning: "–°–∞–º–æ–∞–Ω–∞–ª—ñ–∑, –ø–æ—à—É–∫ —ñ—Å—Ç–∏–Ω–∏, –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ", emoji: "üèÆ" },
    { name: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏", meaning: "–£–¥–∞—á–∞, –¥–æ–ª—è, –∂–∏—Ç—Ç—î–≤—ñ —Ü–∏–∫–ª–∏", emoji: "üé∞" },
    { name: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å", meaning: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å, —ñ—Å—Ç–∏–Ω–∞, –∑–∞–∫–æ–Ω", emoji: "‚öñÔ∏è" },
    { name: "–ü–æ–≤—ñ—à–µ–Ω–∏–π", meaning: "–ñ–µ—Ä—Ç–æ–≤–Ω—ñ—Å—Ç—å, –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è, –Ω–æ–≤–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞", emoji: "üôÉ" },
    { name: "–°–º–µ—Ä—Ç—å", meaning: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è, –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, –Ω–æ–≤–∏–π –ø–æ—á–∞—Ç–æ–∫", emoji: "ü¶ã" },
    { name: "–ü–æ–º—ñ—Ä–Ω—ñ—Å—Ç—å", meaning: "–ë–∞–ª–∞–Ω—Å, —Ç–µ—Ä–ø—ñ–Ω–Ω—è, –º–µ—Ç–∞", emoji: "üßò‚Äç‚ôÄÔ∏è" },
    { name: "–î–∏—è–≤–æ–ª", meaning: "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å, –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–∑–º, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è", emoji: "üòà" },
    { name: "–í–µ–∂–∞", meaning: "–†–∞–ø—Ç–æ–≤—ñ –∑–º—ñ–Ω–∏, —Ö–∞–æ—Å, –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è", emoji: "‚ö°" },
    { name: "–ó—ñ—Ä–∫–∞", meaning: "–ù–∞–¥—ñ—è, –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", emoji: "‚≠ê" },
    { name: "–ú—ñ—Å—è—Ü—å", meaning: "–Ü–ª—é–∑—ñ—ó, —Å—Ç—Ä–∞—Ö–∏, –ø—ñ–¥—Å–≤—ñ–¥–æ–º–µ", emoji: "üåô" },
    { name: "–°–æ–Ω—Ü–µ", meaning: "–†–∞–¥—ñ—Å—Ç—å, —É—Å–ø—ñ—Ö, –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å", emoji: "‚òÄÔ∏è" },
    { name: "–°—É–¥", meaning: "–í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è, –ø—Ä–æ—â–µ–Ω–Ω—è, –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è", emoji: "üìØ" },
    { name: "–°–≤—ñ—Ç", meaning: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", emoji: "üåç" }
];

// –î–û–î–ê–ù–û: –ó–Ω–∞–∫–∏ –∑–æ–¥—ñ–∞–∫—É –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø—É
const zodiacSigns = [
    { name: "‚ôà –û–≤–µ–Ω", period: "21.03 - 19.04", element: "–í–æ–≥–æ–Ω—å", emoji: "üî•" },
    { name: "‚ôâ –¢–µ–ª–µ—Ü—å", period: "20.04 - 20.05", element: "–ó–µ–º–ª—è", emoji: "üå±" },
    { name: "‚ôä –ë–ª–∏–∑–Ω—é–∫–∏", period: "21.05 - 20.06", element: "–ü–æ–≤—ñ—Ç—Ä—è", emoji: "üå¨Ô∏è" },
    { name: "‚ôã –†–∞–∫", period: "21.06 - 22.07", element: "–í–æ–¥–∞", emoji: "üåä" },
    { name: "‚ôå –õ–µ–≤", period: "23.07 - 22.08", element: "–í–æ–≥–æ–Ω—å", emoji: "üî•" },
    { name: "‚ôç –î—ñ–≤–∞", period: "23.08 - 22.09", element: "–ó–µ–º–ª—è", emoji: "üå±" },
    { name: "‚ôé –¢–µ—Ä–µ–∑–∏", period: "23.09 - 22.10", element: "–ü–æ–≤—ñ—Ç—Ä—è", emoji: "üå¨Ô∏è" },
    { name: "‚ôè –°–∫–æ—Ä–ø—ñ–æ–Ω", period: "23.10 - 21.11", element: "–í–æ–¥–∞", emoji: "üåä" },
    { name: "‚ôê –°—Ç—Ä—ñ–ª–µ—Ü—å", period: "22.11 - 21.12", element: "–í–æ–≥–æ–Ω—å", emoji: "üî•" },
    { name: "‚ôë –ö–æ–∑–µ—Ä—ñ–≥", period: "22.12 - 19.01", element: "–ó–µ–º–ª—è", emoji: "üå±" },
    { name: "‚ôí –í–æ–¥–æ–ª—ñ–π", period: "20.01 - 18.02", element: "–ü–æ–≤—ñ—Ç—Ä—è", emoji: "üå¨Ô∏è" },
    { name: "‚ôì –†–∏–±–∏", period: "19.02 - 20.03", element: "–í–æ–¥–∞", emoji: "üåä" }
];

// –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ - –û–ù–û–í–õ–ï–ù–û –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–∏—Ö —Ü—ñ–Ω
const SERVICES = {
    'individual': { name: '1 –ø–∏—Ç–∞–Ω–Ω—è', price: 70, originalPrice: 100 },
    'love': { name: '–õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑', price: 280, originalPrice: 350 },
    'career': { name: '–ö–∞—Ä\'—î—Ä–∞ —ñ —Ñ—ñ–Ω–∞–Ω—Å–∏', price: 350, originalPrice: 400 },
    'full': { name: '"–ü—Ä–æ —Å–µ–±–µ" (6 –ø–∏—Ç–∞–Ω—å)', price: 400, originalPrice: 450 }, // –ó–ú–Ü–ù–ï–ù–û: —Ü—ñ–Ω–∞ –∑ 450 –Ω–∞ 400
    'relationship': { name: '"–°—Ç–æ—Å—É–Ω–∫–∏" (6 –ø–∏—Ç–∞–Ω—å)', price: 390, originalPrice: 450 },
    'business': { name: '"–ë—ñ–∑–Ω–µ—Å" (6 –ø–∏—Ç–∞–Ω—å)', price: 400, originalPrice: 450 },
    'environment': { name: '"–Ø —Ç–∞ –º–æ—î –æ—Ç–æ—á–µ–Ω–Ω—è"', price: 300, originalPrice: 350 }, // –î–û–î–ê–ù–û: –Ω–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞
    'matrix': { name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è', price: 570, originalPrice: 650 },
    'compatibility': { name: '–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ', price: 550, originalPrice: 600 },
    'year': { name: '–ê—Ä–∫–∞–Ω –Ω–∞ —Ä—ñ–∫', price: 560, originalPrice: 600 }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async function saveUserData() {
    try {
        const data = {
            users: Array.from(users.entries()),
            leads: Array.from(leads.entries()),
            orders: Array.from(orders.entries()),
            lastSave: new Date().toISOString()
        };
        await fs.writeFile('users_leads_orders.json', JSON.stringify(data, null, 2));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
    }
}

async function loadUserData() {
    try {
        const data = await fs.readFile('users_leads_orders.json', 'utf8');
        const parsed = JSON.parse(data);
        users = new Map(parsed.users || []);
        leads = new Map(parsed.leads || []);
        orders = new Map(parsed.orders || []);
        console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${users.size} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, ${leads.size} –ª—ñ–¥—ñ–≤, ${orders.size} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
    } catch (error) {
        console.log('–§–∞–π–ª –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π');
        users = new Map();
        leads = new Map();
        orders = new Map();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–æ—Ä—É –ª—ñ–¥—ñ–≤
function collectLead(chatId, user, action) {
    const leadData = {
        chatId: chatId,
        firstName: user.firstName || '–ù–µ–≤—ñ–¥–æ–º–æ',
        username: user.username || '',
        action: action,
        timestamp: new Date().toISOString(),
        readingsCount: leads.has(chatId) ? leads.get(chatId).readingsCount + 1 : 1
    };
    
    leads.set(chatId, leadData);
    
    // –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—ñ–¥–∞
    if (leadData.readingsCount >= 3) {
        bot.sendMessage(ADMIN_CHAT_ID, 
            `üî• –ì–ê–†–Ø–ß–ò–ô –õ–Ü–î!\n\nüë§ ${leadData.firstName} (@${leadData.username})\nüìä –†–æ–∑–∫–ª–∞–¥—ñ–≤: ${leadData.readingsCount}\nüí° –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!`)
            .catch(err => console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≥–∞—Ä—è—á–∏–π –ª—ñ–¥:', err.message));
    }
    
    saveUserData();
}

// –§—É–Ω–∫—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
function getRandomCard() {
    return tarotCards[Math.floor(Math.random() * tarotCards.length)];
}

// –î–û–î–ê–ù–û: –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥—ñ–∞–∫—É
function getRandomZodiacSign() {
    return zodiacSigns[Math.floor(Math.random() * zodiacSigns.length)];
}

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üîÆ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥', 'üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑'],
            ['‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å', 'üéØ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'],
            ['üìû –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', '‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
            ['üíé –ü—Ä–æ MiaxiaLip', 'üì∫ –ù–∞—à –∫–∞–Ω–∞–ª'],
            ['üéÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –û–ù–û–í–õ–ï–ù–û: –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏
const servicesKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üî• 1 –ø–∏—Ç–∞–Ω–Ω—è - 70 –≥—Ä–Ω', callback_data: 'service_individual' },
                { text: 'üíù –õ—é–±–æ–≤–Ω–∏–π - 280 –≥—Ä–Ω', callback_data: 'service_love' }
            ],
            [
                { text: 'üéØ –ö–∞—Ä\'—î—Ä–∞ - 350 –≥—Ä–Ω', callback_data: 'service_career' },
                { text: 'üåü "–ü—Ä–æ —Å–µ–±–µ" - 400 –≥—Ä–Ω', callback_data: 'service_full' }
            ],
            [
                { text: 'üíï "–°—Ç–æ—Å—É–Ω–∫–∏" - 390 –≥—Ä–Ω', callback_data: 'service_relationship' },
                { text: 'üè¢ "–ë—ñ–∑–Ω–µ—Å" - 400 –≥—Ä–Ω', callback_data: 'service_business' }
            ],
            [
                { text: 'üë• "–Ø —Ç–∞ –æ—Ç–æ—á–µ–Ω–Ω—è" - 300 –≥—Ä–Ω', callback_data: 'service_environment' },
                { text: '‚≠ê –ú–∞—Ç—Ä–∏—Ü—è - 570 –≥—Ä–Ω', callback_data: 'service_matrix' }
            ],
            [
                { text: 'üí´ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å - 550 –≥—Ä–Ω', callback_data: 'service_compatibility' },
                { text: 'üéØ –ê—Ä–∫–∞–Ω –Ω–∞ —Ä—ñ–∫ - 560 –≥—Ä–Ω', callback_data: 'service_year' }
            ],
            [
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
            ]
        ]
    }
};

// –ê–¥–º—ñ–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
const adminKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üß™ –¢–µ—Å—Ç ChatGPT', callback_data: 'admin_test_gpt' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
            ],
            [
                { text: 'üìù –ü–æ—Å—Ç –∑–∞—Ä–∞–∑', callback_data: 'admin_post_now' },
                { text: 'üë• –õ—ñ–¥–∏', callback_data: 'admin_leads' }
            ],
            [
                { text: 'üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'admin_orders' },
                { text: 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ', callback_data: 'admin_restart' }
            ]
        ]
    }
};

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
    try {
        const chatId = msg.chat.id;
        const firstName = msg.from.first_name || '–î–æ—Ä–æ–≥–∏–π –¥—Ä—É–∂–µ';
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        users.set(chatId, {
            firstName: firstName,
            username: msg.from.username || '',
            joinDate: new Date().toISOString(),
            lastActivity: new Date().toISOString()
        });
        
        await saveUserData();
        
        const welcomeMessage = `üåü –ü—Ä–∏–≤—ñ—Ç, ${firstName}! 

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—à—É –¥–æ —Å–≤—ñ—Ç—É –¢–∞—Ä–æ –∑ MiaxiaLip! üîÆ

‚ú® –©–æ –º–æ–∂—É –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏—Ç–∏:
‚Ä¢ üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ
‚Ä¢ üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
‚Ä¢ ‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞ –≤–∞—à–∏–º –∑–Ω–∞–∫–æ–º  
‚Ä¢ üéØ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ ‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó

üéÅ **–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:** –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!

üí´ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è!`;

        await bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
        
        // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try {
            await bot.sendMessage(ADMIN_CHAT_ID, `üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${firstName} (@${msg.from.username || '–±–µ–∑ username'})`);
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞:', error.message);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start:', error);
    }
});

// –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
bot.onText(/\/admin/, async (msg) => {
    try {
        if (msg.chat.id.toString() === ADMIN_CHAT_ID) {
            await bot.sendMessage(ADMIN_CHAT_ID, 'üëë –ü–∞–Ω–µ–ª—å –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó + –∑–∞–º–æ–≤–ª–µ–Ω—å:', adminKeyboard);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /admin:', error);
    }
});

bot.on('message', async (msg) => {
    try {
        const chatId = msg.chat.id;
        const text = msg.text;
        
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        if (!text || text.startsWith('/')) return;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (users.has(chatId)) {
            const user = users.get(chatId);
            user.lastActivity = new Date().toISOString();
            users.set(chatId, user);
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if (userSessions.has(chatId) && userSessions.get(chatId).orderInProgress) {
            await handleOrderStep(chatId, text);
            return;
        }
        
        switch (text) {
            case 'üîÆ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥':
                await handleFreeReading(chatId);
                break;
                
            case 'üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑':
                await handleLoveReading(chatId);
                break;
                
            case '‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å':
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–æ—Ä–æ—Å–∫–æ–ø—É
                await handleHoroscope(chatId);
                break;
                
            case 'üéØ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è':
                await handleQuestionPrompt(chatId);
                break;
                
            case 'üìû –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é':
                await handleConsultationRedirect(chatId);
                break;
                
            case '‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
                await startQuickOrder(chatId);
                break;
                
            case 'üíé –ü—Ä–æ MiaxiaLip':
                await handleAbout(chatId);
                break;
                
            case 'üì∫ –ù–∞—à –∫–∞–Ω–∞–ª':
                await handleChannelPromo(chatId);
                break;
                
            case 'üéÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏':
                await handleSpecialPrices(chatId);
                break;
                
            default:
                await handleUserQuestion(chatId, text);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    }
});

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –®–í–ò–î–ö–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
async function startQuickOrder(chatId) {
    try {
        const quickOrderMessage = `‚ö° **–®–í–ò–î–ö–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**

üîÆ –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:

üíé –í—Å—ñ —Ü—ñ–Ω–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞!`;

        await bot.sendMessage(chatId, quickOrderMessage, {
            parse_mode: 'Markdown',
            ...servicesKeyboard
        });
        
        // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'quick_order_started');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    }
}

// –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function handleOrderStep(chatId, text) {
    try {
        const session = userSessions.get(chatId);
        if (!session) return;
        
        const orderData = session.orderData;
        
        switch (session.orderState) {
            case ORDER_STATES.WAITING_NAME:
                orderData.name = text.trim();
                session.orderState = ORDER_STATES.WAITING_PHONE;
                await bot.sendMessage(chatId, 'üì± **–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: +380123456789', {parse_mode: 'Markdown'});
                break;
                
            case ORDER_STATES.WAITING_PHONE:
                orderData.phone = text.trim();
                session.orderState = ORDER_STATES.WAITING_INSTAGRAM;
                await bot.sendMessage(chatId, 'üì∑ **–í–∫–∞–∂—ñ—Ç—å –≤–∞—à Instagram (–û–ë–û–í\'–Ø–ó–ö–û–í–û):**\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: @username', {parse_mode: 'Markdown'});
                break;
                
            case ORDER_STATES.WAITING_INSTAGRAM:
                const instagramInput = text.trim();
                if (!instagramInput || instagramInput.toLowerCase() === '–Ω–µ–º–∞—î' || instagramInput.length < 2) {
                    await bot.sendMessage(chatId, '‚ùå **Instagram –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è!**\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à Instagram –Ω—ñ–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @username):', {parse_mode: 'Markdown'});
                    return; // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
                }
                orderData.instagram = instagramInput;
                session.orderState = ORDER_STATES.CONFIRMING;
                await showOrderConfirmation(chatId, orderData);
                break;
        }
        
        userSessions.set(chatId, session);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handleOrderStep:', error);
    }
}

// –ü–æ–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function showOrderConfirmation(chatId, orderData) {
    try {
        const service = SERVICES[orderData.serviceKey];
        
        const confirmationMessage = `‚úÖ **–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**

üë§ **–Ü–º'—è:** ${orderData.name}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${orderData.phone}
üîÆ **–ü–æ—Å–ª—É–≥–∞:** ${service.name}
üí∞ **–¶—ñ–Ω–∞:** ${service.price} –≥—Ä–Ω ${service.originalPrice > service.price ? `(–∑—ñ –∑–Ω–∏–∂–∫–æ—é –∑ ${service.originalPrice} –≥—Ä–Ω)` : ''}
üì∑ **Instagram:** ${orderData.instagram}

üí´ **–©–æ –¥–∞–ª—ñ:**
‚Ä¢ –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è MiaxiaLip
‚Ä¢ –û–ø–ª–∞—Ç–∞ –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 20-30 —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –§–æ—Ä–º–∞—Ç: –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–≤—ñ–¥–µ–æ

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?`;

        await bot.sendMessage(chatId, confirmationMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', callback_data: 'confirm_order' },
                        { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_order' }
                    ],
                    [
                        { text: '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data: 'edit_order' }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:', error);
    }
}

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function confirmOrder(chatId) {
    try {
        const session = userSessions.get(chatId);
        if (!session) return;
        
        const orderData = session.orderData;
        const service = SERVICES[orderData.serviceKey];
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const orderId = Date.now().toString();
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const orderRecord = {
            id: orderId,
            chatId: chatId,
            name: orderData.name,
            phone: orderData.phone,
            service: service.name,
            price: service.price,
            instagram: orderData.instagram,
            status: 'new',
            timestamp: new Date().toISOString(),
            source: 'Telegram –±–æ—Ç (–ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è)'
        };
        
        orders.set(orderId, orderRecord);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (–≤ —Ñ–æ—Ä–º–∞—Ç—ñ —è–∫ –∑ —Å–∞–π—Ç—É)
        const adminNotification = `üîî **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞ –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó!**

üë§ **–Ü–º'—è:** ${orderData.name}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${orderData.phone}  
üîÆ **–ü–æ—Å–ª—É–≥–∞:** ${service.name}
üí∞ **–¶—ñ–Ω–∞:** ${service.price} –≥—Ä–Ω
üì∑ **Instagram:** ${orderData.instagram}

ü§ñ **–î–∂–µ—Ä–µ–ª–æ:** Telegram –±–æ—Ç @miaxialip_tarot_bot
üìÖ **–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ:** ${new Date().toLocaleString('uk-UA')}
üÜî **ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:** ${orderId}

üìû **–î—ñ—ó:** –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π`;

        try {
            await bot.sendMessage(ADMIN_CHAT_ID, adminNotification, {parse_mode: 'Markdown'});
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞:', error);
        }
        
        // –í–ò–î–ê–õ–ï–ù–û: –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —Å—Ç–∞—Ä–∏–π –±–æ—Ç, —Ç–µ–ø–µ—Ä –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ @miaxialip_tarot_bot
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await bot.sendMessage(chatId, `üéâ **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û!**

‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderId} –ø—Ä–∏–π–Ω—è—Ç–æ

üìû **–ó –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è MiaxiaLip –ø—Ä–æ—Ç—è–≥–æ–º 2-3 –≥–æ–¥–∏–Ω**

üí∞ **–û–ø–ª–∞—Ç–∞:** –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
‚è∞ **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** 20-30 —Ö–≤–∏–ª–∏–Ω  
üì± **–§–æ—Ä–º–∞—Ç:** –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–µ–æ

üôè –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É! –ù–µ–∑–∞–±–∞—Ä–æ–º –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è!

üì∫ –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @miaxiataro`, {
            parse_mode: 'Markdown',
            reply_markup: mainKeyboard.reply_markup
        });
        
        // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
        userSessions.delete(chatId);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        await saveUserData();
        
        // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥ —è–∫ –∫–æ–Ω–≤–µ—Ä—Å—ñ—é
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'order_completed');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    }
}

// –î–û–î–ê–ù–û: –§—É–Ω–∫—Ü—ñ—è –≥–æ—Ä–æ—Å–∫–æ–ø—É
async function handleHoroscope(chatId) {
    try {
        const sign = getRandomZodiacSign();
        const card = getRandomCard();
        
        const horoscope = `‚≠ê **–ì–û–†–û–°–ö–û–ü –ù–ê –î–ï–ù–¨**

${sign.emoji} **${sign.name}** (${sign.period})

üîÆ **–ö–∞—Ä—Ç–∞ –¥–Ω—è:** ${card.emoji} ${card.name}

‚ú® **–ü—Ä–æ–≥–Ω–æ–∑:** ${card.meaning}

${sign.element === '–í–æ–≥–æ–Ω—å' ? 'üî• **–ï–Ω–µ—Ä–≥—ñ—è –≤–æ–≥–Ω—é:** –°—å–æ–≥–æ–¥–Ω—ñ –≤–∞—à–∞ –µ–Ω–µ—Ä–≥—ñ—è –Ω–∞ –ø—ñ–∫—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö —Å–ø—Ä–∞–≤.' :
  sign.element === '–ó–µ–º–ª—è' ? 'üå± **–ï–Ω–µ—Ä–≥—ñ—è –∑–µ–º–ª—ñ:** –î–µ–Ω—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ.' :
  sign.element === '–ü–æ–≤—ñ—Ç—Ä—è' ? 'üå¨Ô∏è **–ï–Ω–µ—Ä–≥—ñ—è –ø–æ–≤—ñ—Ç—Ä—è:** –í—ñ–¥–º—ñ–Ω–Ω–∏–π —á–∞—Å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–æ–≤–∏—Ö —ñ–¥–µ–π.' :
  'üåä **–ï–Ω–µ—Ä–≥—ñ—è –≤–æ–¥–∏:** –î–æ–≤—ñ—Ä—è–π—Ç–µ —ñ–Ω—Ç—É—ó—Ü—ñ—ó —Ç–∞ –µ–º–æ—Ü—ñ—è–º —Å—å–æ–≥–æ–¥–Ω—ñ.'}

üí´ *–¶–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É –∑–∞–º–æ–≤—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é!*

üéÅ **–ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑?** –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!`;

        await bot.sendMessage(chatId, horoscope, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ - 70 –≥—Ä–Ω', callback_data: 'service_individual' }],
                    [{ text: '‚≠ê –Ü–Ω—à–∏–π –∑–Ω–∞–∫', callback_data: 'another_horoscope' }]
                ]
            }
        });
        
        // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'horoscope_reading');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø—É:', error);
    }
}

// –ó–≤—ñ—Ç –ø–æ –ª—ñ–¥–∞—Ö
async function generateLeadsReport() {
    const leadsArray = Array.from(leads.values());
    const hotLeads = leadsArray.filter(lead => lead.readingsCount >= 3);
    
    let report = `üë• **–ó–í–Ü–¢ –ü–û –õ–Ü–î–ê–•**

üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤: ${leadsArray.length}
‚Ä¢ –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏: ${hotLeads.length}

üî• **–ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏ (3+ –¥—ñ—ó):**\n`;
    
    if (hotLeads.length > 0) {
        hotLeads.slice(-10).forEach(lead => {
            const lastActivity = new Date(lead.timestamp).toLocaleDateString('uk-UA');
            report += `‚Ä¢ ${lead.firstName} (@${lead.username}) - ${lead.readingsCount} –¥—ñ–π - ${lastActivity}\n`;
        });
    } else {
        report += '‚Ä¢ –ü–æ–∫–∏ –Ω–µ–º–∞—î –≥–∞—Ä—è—á–∏—Ö –ª—ñ–¥—ñ–≤\n';
    }
    
    report += `\nüìà **–û—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó –ª—ñ–¥—ñ–≤:**\n`;
    leadsArray.slice(-5).forEach(lead => {
        const date = new Date(lead.timestamp).toLocaleDateString('uk-UA');
        report += `‚Ä¢ ${lead.firstName} - ${lead.action} - ${date}\n`;
    });
    
    return report;
}

// –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    try {
        const message = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = message.chat.id;
        
        // –î–û–î–ê–ù–û: –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É
        if (data === 'another_horoscope') {
            await handleHoroscope(chatId);
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }
        
        // –°–µ—Ä–≤—ñ—Å–∏
        if (data.startsWith('service_')) {
            const serviceKey = data.replace('service_', '');
            const service = SERVICES[serviceKey];
            
            if (service) {
                // –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                const orderData = {
                    serviceKey: serviceKey,
                    name: '',
                    phone: '',
                    instagram: ''
                };
                
                userSessions.set(chatId, {
                    orderInProgress: true,
                    orderState: ORDER_STATES.WAITING_NAME,
                    orderData: orderData
                });
                
                await bot.editMessageText(`üìù **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø: ${service.name.toUpperCase()}**

üí∞ **–¶—ñ–Ω–∞:** ${service.price} –≥—Ä–Ω ${service.originalPrice > service.price ? `(–∑—ñ –∑–Ω–∏–∂–∫–æ—é –∑ ${service.originalPrice} –≥—Ä–Ω)` : ''}

üë§ **–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:**`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    parse_mode: 'Markdown'
                });
            }
        }
        
        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if (data === 'confirm_order') {
            await confirmOrder(chatId);
        }
        
        if (data === 'cancel_order') {
            userSessions.delete(chatId);
            await bot.editMessageText('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ', {
                chat_id: chatId,
                message_id: message.message_id
            });
        }
        
        if (data === 'edit_order') {
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const session = userSessions.get(chatId);
            if (session) {
                session.orderState = ORDER_STATES.WAITING_NAME;
                userSessions.set(chatId, session);
                
                await bot.editMessageText(`‚úèÔ∏è **–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**

üë§ **–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:**`, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    parse_mode: 'Markdown'
                });
            }
        }
        
        // –ê–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏
        if (data.startsWith('admin_') && chatId.toString() === ADMIN_CHAT_ID) {
            switch (data) {
                case 'admin_test_gpt':
                    try {
                        await bot.editMessageText('üß™ –¢–µ—Å—Ç—É—é ChatGPT...', {
                            chat_id: chatId,
                            message_id: message.message_id
                        });
                        
                        // –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
                        if (!testChatGPT || typeof testChatGPT !== 'function') {
                            await bot.editMessageText(`üß™ **–¢–ï–°–¢ CHATGPT**\n\n‚ùå ChatGPT –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!`, {
                                chat_id: chatId,
                                message_id: message.message_id,
                                parse_mode: 'Markdown'
                            });
                            break;
                        }
                        
                        const testResult = await testChatGPT(bot, chatId);
                        await bot.editMessageText(`üß™ **–¢–ï–°–¢ CHATGPT**\n\n${testResult ? '‚úÖ ChatGPT –ø—Ä–∞—Ü—é—î!' : '‚ùå ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!'}`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    } catch (error) {
                        await bot.editMessageText(`‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É ChatGPT:**\n\n${error.message}`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    }
                    break;
                    
                case 'admin_post_now':
                    try {
                        await bot.editMessageText('üìù –ì–µ–Ω–µ—Ä—É—é –ø–æ—Å—Ç + –¥–æ–¥–∞—é –∫–æ–Ω—Ç–∞–∫—Ç–∏...', {
                            chat_id: chatId,
                            message_id: message.message_id
                        });
                        
                        const postResult = await sendSmartPostWithFooter(bot, CHANNEL_ID);
                        await bot.editMessageText(`üìù **–ü–û–°–¢ –í–Ü–î–ü–†–ê–í–õ–ï–ù–û**\n\n${postResult ? '‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ñ @miaxiataro!\nüì¨ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!' : '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∞–±–æ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!'}`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    } catch (error) {
                        await bot.editMessageText(`‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:**\n\n${error.message}`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    }
                    break;
                    
                case 'admin_leads':
                    const leadsReport = await generateLeadsReport();
                    await bot.editMessageText(leadsReport, {
                        chat_id: chatId,
                        message_id: message.message_id,
                        parse_mode: 'Markdown'
                    });
                    break;
                    
                case 'admin_orders':
                    const ordersReport = await generateOrdersReport();
                    await bot.editMessageText(ordersReport, {
                        chat_id: chatId,
                        message_id: message.message_id,
                        parse_mode: 'Markdown'
                    });
                    break;
                    
                case 'admin_restart':
                    try {
                        await bot.editMessageText('üîÑ –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...', {
                            chat_id: chatId,
                            message_id: message.message_id
                        });
                        
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
                        await saveUserData();
                        
                        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
                        await loadUserData();
                        
                        // –û—á–∏—â–∞—î–º–æ –∫–µ—à—ñ —Ç–∞ —Å–µ—Å—ñ—ó
                        userSessions.clear();
                        
                        const stats = await getStatistics();
                        
                        await bot.editMessageText(`‚úÖ **–î–ê–ù–Ü –û–ù–û–í–õ–ï–ù–û**

üìä **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${stats.totalUsers}
‚Ä¢ –õ—ñ–¥—ñ–≤: ${stats.totalLeads}  
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: ${stats.totalOrders}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –æ—á–∏—â–µ–Ω–æ

üîÑ **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ!**
üì¨ **–ì–ê–†–ê–ù–¢–Ü–Ø:** –ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –¥–æ –í–°–Ü–• –ø–æ—Å—Ç—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    } catch (error) {
                        await bot.editMessageText(`‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:**\n\n${error.message}`, {
                            chat_id: chatId,
                            message_id: message.message_id,
                            parse_mode: 'Markdown'
                        });
                    }
                    break;
                    
                case 'admin_stats':
                    const stats = await getStatistics();
                    const gptStats = getChatGPTStats();
                    
                    const statsMessage = `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–á + –ó–ê–ú–û–í–õ–ï–ù–¨**

üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
‚Ä¢ –í—Å—å–æ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.activeToday}
‚Ä¢ –ù–æ–≤—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.newToday}

üéØ **–õ—ñ–¥–∏:**
‚Ä¢ –í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤: ${stats.totalLeads}
‚Ä¢ –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏: ${stats.hotLeads}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: ${stats.conversionRate}%

üìã **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:**
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: ${stats.totalOrders}
‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: ${stats.ordersToday}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –ª—ñ–¥—ñ–≤: ${stats.orderConversionRate}%

ü§ñ **ChatGPT:**
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${gptStats.successRate}%

üì∫ **–ö–∞–Ω–∞–ª:** @miaxiataro

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–ª—ñ–¥–∏ ‚Üí –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏: ‚úÖ –ì–ê–†–ê–ù–¢–û–í–ê–ù–û –¥–æ–¥–∞—é—Ç—å—Å—è –¥–æ –í–°–Ü–• –ø–æ—Å—Ç—ñ–≤`;

                    await bot.editMessageText(statsMessage, {
                        chat_id: chatId,
                        message_id: message.message_id,
                        parse_mode: 'Markdown'
                    });
                    break;
            }
        }
        
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ callback:', error);
        try {
            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (e) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ callback:', e);
        }
    }
});

// –†–ï–®–¢–ê –§–£–ù–ö–¶–Ü–ô (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ —ñ —Ç.–¥.)
async function handleFreeReading(chatId) {
    try {
        const cards = [getRandomCard(), getRandomCard(), getRandomCard()];
        
        const reading = `üîÆ **–ë–ï–ó–ö–û–®–¢–û–í–ù–ò–ô –†–û–ó–ö–õ–ê–î –ù–ê –î–ï–ù–¨**

üåÖ **–†–∞–Ω–æ–∫:** ${cards[0].emoji} ${cards[0].name}
${cards[0].meaning}

‚òÄÔ∏è **–î–µ–Ω—å:** ${cards[1].emoji} ${cards[1].name}
${cards[1].meaning}

üåô **–í–µ—á—ñ—Ä:** ${cards[2].emoji} ${cards[2].name}
${cards[2].meaning}

üí´ *–¶–µ–π —Ä–æ–∑–∫–ª–∞–¥ –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—ó –¥–Ω—è!*

üéÅ **–°–ø–æ–¥–æ–±–∞–≤—Å—è —Ä–æ–∑–∫–ª–∞–¥?** –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!`;

        await bot.sendMessage(chatId, reading, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - 70 –≥—Ä–Ω', callback_data: 'service_individual' }],
                    [{ text: 'üåê –ó–∞–º–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç', url: 'https://theglamstyle.com.ua' }]
                ]
            }
        });
        
        // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'free_reading');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É:', error);
    }
}

// –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω...
async function handleLoveReading(chatId) {
    try {
        const cards = [getRandomCard(), getRandomCard()];
        
        const reading = `üíù **–õ–Æ–ë–û–í–ù–ò–ô –ü–†–û–ì–ù–û–ó**

üíï **–í–∞—à —Å—Ç–∞–Ω —É –ª—é–±–æ–≤—ñ:** ${cards[0].emoji} ${cards[0].name}
${cards[0].meaning}

üåπ **–©–æ –æ—á—ñ–∫—É—î –≤ —Å—Ç–æ—Å—É–Ω–∫–∞—Ö:** ${cards[1].emoji} ${cards[1].name}
${cards[1].meaning}

‚ú® *–ü–∞–º'—è—Ç–∞–π—Ç–µ: —Å–ø—Ä–∞–≤–∂–Ω—î –∫–æ—Ö–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ª—é–±–æ–≤—ñ –¥–æ —Å–µ–±–µ!*

üíñ **–•–æ—á–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥?** –¢—ñ–ª—å–∫–∏ 280 –≥—Ä–Ω!`;

        await bot.sendMessage(chatId, reading, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –ó–∞–º–æ–≤–∏—Ç–∏ –ª—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥', callback_data: 'service_love' }],
                    [{ text: 'üåê –ó–∞–º–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç', url: 'https://theglamstyle.com.ua' }]
                ]
            }
        });
        
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'love_reading');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª—é–±–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:', error);
    }
}

async function handleUserQuestion(chatId, question) {
    try {
        const card = getRandomCard();
        
        const response = `üîÆ **–í–Ü–î–ü–û–í–Ü–î–¨ –ù–ê –í–ê–®–ï –ü–ò–¢–ê–ù–ù–Ø**

‚ùì **–ü–∏—Ç–∞–Ω–Ω—è:** "${question}"

üÉè **–ö–∞—Ä—Ç–∞-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:** ${card.emoji} ${card.name}

‚ú® **–ó–Ω–∞—á–µ–Ω–Ω—è:** ${card.meaning}

üí´ **–ü–æ—Ä–∞–¥–∞:** –¶—è –∫–∞—Ä—Ç–∞ —Ä–∞–¥–∏—Ç—å –¥–æ–≤—ñ—Ä—è—Ç–∏ —Å–≤–æ—ó–π —ñ–Ω—Ç—É—ó—Ü—ñ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–µ—Ä—Ü—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ø—Ä–∏—Å–ª—É—Ö–∞—Ç–∏—Å—è –¥–æ –Ω–µ—ó.

üéÅ **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è?** –ü–µ—Ä—à–∞ —Å–µ—Å—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!`;

        await bot.sendMessage(chatId, response, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é - 70 –≥—Ä–Ω', callback_data: 'service_individual' }],
                    [{ text: 'üîÆ –©–µ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'ask_another' }]
                ]
            }
        });
        
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'question_asked');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:', error);
    }
}

async function handleQuestionPrompt(chatId) {
    try {
        const promptMessage = `üéØ **–ó–ê–î–ê–ô–¢–ï –í–ê–®–ï –ü–ò–¢–ê–ù–ù–Ø**

–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –≤–∞–º –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏ –¢–∞—Ä–æ!

üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø–∏—Ç–∞–Ω—å:**
‚Ä¢ –ß–∏ –≤–∞—Ä—Ç–æ –º—ñ–Ω—è—Ç–∏ —Ä–æ–±–æ—Ç—É?
‚Ä¢ –Ø–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å—Ç–æ—Å—É–Ω–∫–∏?
‚Ä¢ –©–æ –º–µ–Ω–µ —á–µ–∫–∞—î —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?
‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —è —Ä–æ–±–ª—é?

‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º!`;

        await bot.sendMessage(chatId, promptMessage, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–º–ø—Ç—É –ø–∏—Ç–∞–Ω–Ω—è:', error);
    }
}

async function handleConsultationRedirect(chatId) {
    try {
        const redirectMessage = `üìû **–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø**

üéÅ **–°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –ü–†–û–ü–û–ó–ò–¶–Ü–Ø:** 70 –≥—Ä–Ω!

üîÆ **–©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:**
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –∫–∞—Ä—Ç
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥

‚è±Ô∏è **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** 20-30 —Ö–≤–∏–ª–∏–Ω
üì± **–§–æ—Ä–º–∞—Ç:** –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–µ–æ

üõí **–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:**`;

        await bot.sendMessage(chatId, redirectMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ', callback_data: 'service_individual' }],
                    [{ text: 'üåê –ó–∞–º–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç', url: 'https://theglamstyle.com.ua' }],
                    [{ text: 'üì± –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ Instagram', url: 'https://instagram.com/miaxialip' }]
                ]
            }
        });
        
        if (users.has(chatId)) {
            collectLead(chatId, users.get(chatId), 'consultation_interest');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:', error);
    }
}

// –û–ù–û–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–º–æ –∫–∞–Ω–∞–ª—É –±–µ–∑ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è ChatGPT
async function handleChannelPromo(chatId) {
    try {
        const channelMessage = `üì∫ **–ù–ê–® TELEGRAM –ö–ê–ù–ê–õ**

üîÆ –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ @miaxiataro!

‚ú® **–©–æ –≤–∞—Å —á–µ–∫–∞—î:**
‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ—Å—Ç–∏ –ø—Ä–æ –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å  
‚Ä¢ –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –õ—é–±–æ–≤–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏
‚Ä¢ –ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Ä–æ–∫—É
‚Ä¢ –ü—ñ–¥–∫–∞–∑–∫–∏ –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ –ø–ª–∞–Ω–µ—Ç
‚Ä¢ –ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å —Å–∫–ª–∞–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∏—Ç—ñ–≤
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è
‚Ä¢ –ë–∞–≥–∞—Ç–æ —ñ–Ω—à–æ—ó –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó

üí´ –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É!`;

        await bot.sendMessage(chatId, channelMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì∫ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url: 'https://t.me/miaxiataro' }],
                    [{ text: 'üì± Instagram', url: 'https://instagram.com/miaxialip' }]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–º–æ –∫–∞–Ω–∞–ª—É:', error);
    }
}

// –û–ù–û–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü—ñ—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω –∑ –Ω–æ–≤–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ —Ç–∞ —Ü—ñ–Ω–∞–º–∏
async function handleSpecialPrices(chatId) {
    try {
        const pricesMessage = `üéÅ **–°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –¶–Ü–ù–ò –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í –ë–û–¢–ê**

üíé **–ê–ö–¶–Ü–ô–ù–Ü –ü–†–û–ü–û–ó–ò–¶–Ü–á:**

üî• **1 –ø–∏—Ç–∞–Ω–Ω—è** - 70 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 100!)
‚ö° –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –∑–∞–ø–∏—Å—É –≤ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–ª—è –≤–∞—Å –≥–æ–¥–∏–Ω–∏

üéØ **"–ü—Ä–æ —Å–µ–±–µ"** - 400 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 450!)
üåü 6 –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è

üíï **"–°—Ç–æ—Å—É–Ω–∫–∏"** - 390 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 450!)
üíñ 6 –ø–∏—Ç–∞–Ω—å –ø—Ä–æ –≤–∞—à—ñ —Å—Ç–æ—Å—É–Ω–∫–∏

üè¢ **"–ë—ñ–∑–Ω–µ—Å"** - 400 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 450!)
üíº 6 –ø–∏—Ç–∞–Ω—å –ø—Ä–æ –∫–∞—Ä'—î—Ä—É —Ç–∞ –±—ñ–∑–Ω–µ—Å

üë• **"–Ø —Ç–∞ –º–æ—î –æ—Ç–æ—á–µ–Ω–Ω—è"** - 300 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 350!)
ü§ù –ê–Ω–∞–ª—ñ–∑ –≤–∑–∞—î–º–∏–Ω –∑ –æ—Ç–æ—á–µ–Ω–Ω—è–º

‚≠ê **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è** - 570 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 650!)
üîÆ –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ

üéÅ **–ï–ö–°–ö–õ–Æ–ó–ò–í–ù–û –î–õ–Ø –ë–û–¢–ê:**
‚Ä¢ –ó–Ω–∏–∂–∫–∏ –¥–æ 30% –Ω–∞ –≤—Å—ñ –ø–æ—Å–ª—É–≥–∏
‚Ä¢ –®–≤–∏–¥–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

‚è∞ **–ê–∫—Ü—ñ—è –¥—ñ—î —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç!**`;

        await bot.sendMessage(chatId, pricesMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: 'quick_order' }],
                    [{ text: 'üåê –°–∞–π—Ç (–±–µ–∑ –∑–Ω–∏–∂–æ–∫)', url: 'https://theglamstyle.com.ua' }]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω:', error);
    }
}

async function handleAbout(chatId) {
    try {
        const aboutMessage = `üíé **–ü–†–û MIAXIALIP**

üåü –ü—Ä–∏–≤—ñ—Ç! –Ø –ú—ñ–∞ - –≤–∞—à –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –¢–∞—Ä–æ!

üîÆ **–ú—ñ–π –¥–æ—Å–≤—ñ–¥:**
‚Ä¢ 5+ —Ä–æ–∫—ñ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¢–∞—Ä–æ
‚Ä¢ –ë—ñ–ª—å—à–µ 2000+ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–æ–∂–Ω–æ–≥–æ
‚Ä¢ –°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó

‚ú® **–ú–æ—è –º—ñ—Å—ñ—è:** 
–î–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–∞–π—Ç–∏ —Å–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö.

üí´ **–©–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î –º–µ–Ω–µ:**
‚Ä¢ –ß–µ—Å–Ω—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏  
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ–Ω–∏
‚Ä¢ –ê–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞

üåà *–¢–∞—Ä–æ - —Ü–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è, –¥–æ—Å—Ç—É–ø–Ω–∏–π –∫–æ–∂–Ω–æ–º—É!*`;

        await bot.sendMessage(chatId, aboutMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì± Instagram', url: 'https://instagram.com/miaxialip' }],
                    [{ text: 'üåê –°–∞–π—Ç', url: 'https://theglamstyle.com.ua' }],
                    [{ text: '‚ö° –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', callback_data: 'service_individual' }]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ MiaxiaLip:', error);
    }
}

// –ó–≤—ñ—Ç –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è—Ö
async function generateOrdersReport() {
    const ordersArray = Array.from(orders.values());
    const recentOrders = ordersArray.filter(order => {
        const orderDate = new Date(order.timestamp);
        const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000);
        return orderDate > threeDaysAgo;
    });
    
    let report = `üìã **–ó–í–Ü–¢ –ü–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–•**

üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: ${ordersArray.length}
‚Ä¢ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ: ${recentOrders.length}

üí∞ **–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n`;
    
    if (recentOrders.length > 0) {
        recentOrders.slice(-5).forEach(order => {
            const date = new Date(order.timestamp).toLocaleDateString('uk-UA');
            report += `‚Ä¢ ${order.name} - ${order.service} (${order.price} –≥—Ä–Ω) - ${date}\n`;
        });
    } else {
        report += '‚Ä¢ –ü–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å\n';
    }
    
    return report;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async function getStatistics() {
    const totalUsers = users.size;
    const totalLeads = leads.size;
    const totalOrders = orders.size;
    
    const activeToday = Array.from(users.values()).filter(user => {
        const lastActivity = new Date(user.lastActivity);
        const today = new Date();
        return lastActivity.toDateString() === today.toDateString();
    }).length;
    
    const ordersToday = Array.from(orders.values()).filter(order => {
        const orderDate = new Date(order.timestamp);
        const today = new Date();
        return orderDate.toDateString() === today.toDateString();
    }).length;
    
    const hotLeads = Array.from(leads.values()).filter(lead => lead.readingsCount >= 3).length;
    const conversionRate = totalUsers > 0 ? ((totalLeads / totalUsers) * 100).toFixed(1) : 0;
    const orderConversionRate = totalLeads > 0 ? ((totalOrders / totalLeads) * 100).toFixed(1) : 0;
    
    return {
        totalUsers,
        totalLeads,
        totalOrders,
        hotLeads,
        conversionRate,
        orderConversionRate,
        activeToday,
        ordersToday,
        newToday: Array.from(users.values()).filter(user => {
            const joinDate = new Date(user.joinDate);
            const today = new Date();
            return joinDate.toDateString() === today.toDateString();
        }).length
    };
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    await loadUserData();
    
    // –ó–∞–ø—É—Å–∫ ChatGPT –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤ –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    scheduleSmartPostsWithFooter(bot, CHANNEL_ID);
    
    console.log('ü§ñ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞ MiaxiaLip –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log('üéØ –õ—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è + –ü—Ä–∏–π–æ–º –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ñ');
    console.log('üß† ChatGPT –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É @miaxiataro –∞–∫—Ç–∏–≤–Ω–∏–π');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–∏—Ä–∞—î—Ç—å—Å—è');
    console.log('üì¨ –û–ë–û–í\'–Ø–ó–ö–û–í–Ü –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –¥–æ –í–°–Ü–• –ø–æ—Å—Ç—ñ–≤');
    
    const hasOpenAI = process.env.OPENAI_API_KEY ? '‚úÖ' : '‚ùå';
    const hasChatGPT = chatGPTIntegration && chatGPTIntegration.sendSmartPost !== (() => Promise.resolve(false)) ? '‚úÖ' : '‚ùå';
    console.log(`üîë ChatGPT API: ${hasOpenAI}`);
    console.log(`üß† ChatGPT –º–æ–¥—É–ª—å: ${hasChatGPT}`);
    
    try {
        await bot.sendMessage(ADMIN_CHAT_ID, `üöÄ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!

üéØ **–§—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ ‚úÖ –õ—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏)
‚Ä¢ ‚úÖ –ü—Ä–∏–π–æ–º –∑–∞–º–æ–≤–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –≤ @miaxialip_tarot_bot)
‚Ä¢ ${hasChatGPT} ChatGPT –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É @miaxiataro
‚Ä¢ ‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ª—ñ–¥—ñ–≤ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
‚Ä¢ ‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ
‚Ä¢ ‚úÖ –ö–û–ù–¢–ê–ö–¢–ò –î–û–î–ê–Æ–¢–¨–°–Ø –î–û –í–°–Ü–• –ü–û–°–¢–Ü–í –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û

üìä **–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.size}
‚Ä¢ –õ—ñ–¥—ñ–≤: ${leads.size}
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: ${orders.size}

üîó **–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª:**
–ö–∞–Ω–∞–ª @miaxiataro ‚Üí –ë–æ—Ç ‚Üí –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ ‚Üí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Üí –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É

üì¨ **–ì–ê–†–ê–ù–¢–Ü–Ø:** –ö–æ–∂–µ–Ω –ø–æ—Å—Ç ChatGPT –º–∞—Ç–∏–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏!

–ö–æ–º–∞–Ω–¥–∏:
/admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è`);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫:', error);
    }
}

// –©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (21:00)
cron.schedule('0 21 * * *', async () => {
    try {
        const stats = await getStatistics();
        const gptStats = getChatGPTStats();
        
        const statsMessage = `üìä **–©–û–î–ï–ù–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–í–ù–û–ì–û –¶–ò–ö–õ–£**

üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** ${stats.totalUsers} (+${stats.newToday})
üéØ **–õ—ñ–¥–∏:** ${stats.totalLeads} (–∫–æ–Ω–≤–µ—Ä—Å—ñ—è ${stats.conversionRate}%)
üìã **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:** ${stats.totalOrders} (+${stats.ordersToday}) (–∫–æ–Ω–≤–µ—Ä—Å—ñ—è ${stats.orderConversionRate}%)
üî• **–ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏:** ${stats.hotLeads}

ü§ñ **ChatGPT:** ${gptStats.successRate}% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
üì∫ **–ö–∞–Ω–∞–ª:** @miaxiataro
üì¨ **–ö–æ–Ω—Ç–∞–∫—Ç–∏:** –ì–ê–†–ê–ù–¢–û–í–ê–ù–û –≤ –ö–û–ñ–ù–û–ú–£ –ø–æ—Å—Ç—ñ
‚ö° **–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–∞—Ü—é—î`;

        await bot.sendMessage(ADMIN_CHAT_ID, statsMessage, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
});

process.on('SIGINT', async () => {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –±–æ—Ç–∞...');
    await saveUserData();
    try {
        await bot.sendMessage(ADMIN_CHAT_ID, '‚èπÔ∏è –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É:', error);
    }
    process.exit(0);
});

startBot();
