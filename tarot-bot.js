// –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–∞—Ä–æ MiaxiaLip - –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–Ø + ChatGPT –∫–æ–Ω—Ç–µ–Ω—Ç
// –†–æ–ª—å: –∑–±—ñ—Ä –ª—ñ–¥—ñ–≤, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏, –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É
// –ó–∞–ø—É—Å–∫: node tarot-bot.js

const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs').promises;
const path = require('path');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
const { 
    scheduleSmartPosts, 
    testChatGPT, 
    sendSmartPost,
    getChatGPTStats 
} = require('./chatgpt-integration');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
let config;
try {
    config = require('./config');
    console.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è config.js:');
    console.error('–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª config.js –Ω–∞ –æ—Å–Ω–æ–≤—ñ config-template.js');
    console.error('–î–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤ README –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó');
    process.exit(1);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const BOT_TOKEN = config.telegram.botToken;
const ADMIN_CHAT_ID = config.telegram.adminChatId;
const CHANNEL_ID = config.telegram.channelId;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
if (!BOT_TOKEN || BOT_TOKEN === '–í–°–¢–ê–í–¢–ï_–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–°–Æ–î–ò') {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.js');
    console.error('–û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather —ñ –≤—Å—Ç–∞–≤—Ç–µ –≤ config.js');
    process.exit(1);
}

if (!ADMIN_CHAT_ID || ADMIN_CHAT_ID === '–í–°–¢–ê–í–¢–ï_–í–ê–®_CHAT_ID_–°–Æ–î–ò') {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ Chat ID –∞–¥–º—ñ–Ω–∞ –≤ config.js');
    console.error('–û—Ç—Ä–∏–º–∞–π—Ç–µ Chat ID –≤—ñ–¥ @userinfobot —ñ –≤—Å—Ç–∞–≤—Ç–µ –≤ config.js');
    process.exit(1);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ª—ñ–¥—ñ–≤
let users = new Map();
let leads = new Map(); // –î–ª—è –∑–±–æ—Ä—É –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
let userSessions = new Map();

// –ö–∞—Ä—Ç–∫–∏ –¢–∞—Ä–æ –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
const tarotCards = [
    { name: "–î—É—Ä–µ–Ω—å", meaning: "–ù–æ–≤—ñ –ø–æ—á–∞—Ç–∫–∏, —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ—Å—Ç—å, –Ω–µ–≤–∏–Ω–Ω—ñ—Å—Ç—å", emoji: "üÉè" },
    { name: "–ú–∞–≥", meaning: "–í–æ–ª—è, –ø—Ä–æ—è–≤, —Ä–µ—Å—É—Ä—Å–∏", emoji: "üé©" },
    { name: "–í–µ—Ä—Ö–æ–≤–Ω–∞ –∂—Ä–∏—Ü—è", meaning: "–Ü–Ω—Ç—É—ó—Ü—ñ—è, –ø—ñ–¥—Å–≤—ñ–¥–æ–º–µ, –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –º—É–¥—Ä—ñ—Å—Ç—å", emoji: "üåô" },
    { name: "–Ü–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü—è", meaning: "–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ø–ª–æ–¥—é—á—ñ—Å—Ç—å, –ø—Ä–∏—Ä–æ–¥–∞", emoji: "üëë" },
    { name: "–Ü–º–ø–µ—Ä–∞—Ç–æ—Ä", meaning: "–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å", emoji: "‚öúÔ∏è" },
    { name: "–Ü—î—Ä–æ—Ñ–∞–Ω—Ç", meaning: "–¢—Ä–∞–¥–∏—Ü—ñ—ó, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –Ω–æ—Ä–º–∏, –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å", emoji: "‚õ™" },
    { name: "–ó–∞–∫–æ—Ö–∞–Ω—ñ", meaning: "–õ—é–±–æ–≤, –≥–∞—Ä–º–æ–Ω—ñ—è, —Å—Ç–æ—Å—É–Ω–∫–∏", emoji: "üíù" },
    { name: "–ö–æ–ª—ñ—Å–Ω–∏—Ü—è", meaning: "–ö–æ–Ω—Ç—Ä–æ–ª—å, –≤–æ–ª—è –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å", emoji: "üèÜ" },
    { name: "–°–∏–ª–∞", meaning: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è —Å–∏–ª–∞, —Ç–µ—Ä–ø—ñ–Ω–Ω—è, —Å–ø—ñ–≤—á—É—Ç—Ç—è", emoji: "üí™" },
    { name: "–í—ñ–¥–ª—é–¥–Ω–∏–∫", meaning: "–°–∞–º–æ–∞–Ω–∞–ª—ñ–∑, –ø–æ—à—É–∫ —ñ—Å—Ç–∏–Ω–∏, –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ", emoji: "üèÆ" },
    { name: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏", meaning: "–£–¥–∞—á–∞, –¥–æ–ª—è, –∂–∏—Ç—Ç—î–≤—ñ —Ü–∏–∫–ª–∏", emoji: "üé∞" },
    { name: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å", meaning: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å, —ñ—Å—Ç–∏–Ω–∞, –∑–∞–∫–æ–Ω", emoji: "‚öñÔ∏è" },
    { name: "–ü–æ–≤—ñ—à–µ–Ω–∏–π", meaning: "–ñ–µ—Ä—Ç–æ–≤–Ω—ñ—Å—Ç—å, –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è, –Ω–æ–≤–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞", emoji: "üôÉ" },
    { name: "–°–º–µ—Ä—Ç—å", meaning: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è, –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, –Ω–æ–≤–∏–π –ø–æ—á–∞—Ç–æ–∫", emoji: "ü¶ã" },
    { name: "–ü–æ–º—ñ—Ä–Ω—ñ—Å—Ç—å", meaning: "–ë–∞–ª–∞–Ω—Å, —Ç–µ—Ä–ø—ñ–Ω–Ω—è, –º–µ—Ç–∞", emoji: "üßò‚Äç‚ôÄÔ∏è" },
    { name: "–î–∏—è–≤–æ–ª", meaning: "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å, –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–∑–º, —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è", emoji: "üòà" },
    { name: "–í–µ–∂–∞", meaning: "–†–∞–ø—Ç–æ–≤—ñ –∑–º—ñ–Ω–∏, —Ö–∞–æ—Å, –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è", emoji: "‚ö°" },
    { name: "–ó—ñ—Ä–∫–∞", meaning: "–ù–∞–¥—ñ—è, –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", emoji: "‚≠ê" },
    { name: "–ú—ñ—Å—è—Ü—å", meaning: "–Ü–ª—é–∑—ñ—ó, —Å—Ç—Ä–∞—Ö–∏, –ø—ñ–¥—Å–≤—ñ–¥–æ–º–µ", emoji: "üåô" },
    { name: "–°–æ–Ω—Ü–µ", meaning: "–†–∞–¥—ñ—Å—Ç—å, —É—Å–ø—ñ—Ö, –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ—Å—Ç—å", emoji: "‚òÄÔ∏è" },
    { name: "–°—É–¥", meaning: "–í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è, –ø—Ä–æ—â–µ–Ω–Ω—è, –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è", emoji: "üìØ" },
    { name: "–°–≤—ñ—Ç", meaning: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", emoji: "üåç" }
];

// –ó–æ–¥—ñ–∞–∫–∞–ª—å–Ω—ñ –∑–Ω–∞–∫–∏
const zodiacSigns = [
    { name: "–û–≤–µ–Ω", emoji: "‚ôà", dates: "21.03 - 19.04" },
    { name: "–¢–µ–ª–µ—Ü—å", emoji: "‚ôâ", dates: "20.04 - 20.05" },
    { name: "–ë–ª–∏–∑–Ω—é–∫–∏", emoji: "‚ôä", dates: "21.05 - 20.06" },
    { name: "–†–∞–∫", emoji: "‚ôã", dates: "21.06 - 22.07" },
    { name: "–õ–µ–≤", emoji: "‚ôå", dates: "23.07 - 22.08" },
    { name: "–î—ñ–≤–∞", emoji: "‚ôç", dates: "23.08 - 22.09" },
    { name: "–¢–µ—Ä–µ–∑–∏", emoji: "‚ôé", dates: "23.09 - 22.10" },
    { name: "–°–∫–æ—Ä–ø—ñ–æ–Ω", emoji: "‚ôè", dates: "23.10 - 21.11" },
    { name: "–°—Ç—Ä—ñ–ª–µ—Ü—å", emoji: "‚ôê", dates: "22.11 - 21.12" },
    { name: "–ö–æ–∑–µ—Ä—ñ–≥", emoji: "‚ôë", dates: "22.12 - 19.01" },
    { name: "–í–æ–¥–æ–ª—ñ–π", emoji: "‚ôí", dates: "20.01 - 18.02" },
    { name: "–†–∏–±–∏", emoji: "‚ôì", dates: "19.02 - 20.03" }
];

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
async function saveUserData() {
    try {
        const data = {
            users: Array.from(users.entries()),
            leads: Array.from(leads.entries()),
            lastSave: new Date().toISOString()
        };
        await fs.writeFile('users_leads.json', JSON.stringify(data, null, 2));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    }
}

async function loadUserData() {
    try {
        const data = await fs.readFile('users_leads.json', 'utf8');
        const parsed = JSON.parse(data);
        users = new Map(parsed.users || []);
        leads = new Map(parsed.leads || []);
        console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${users.size} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ ${leads.size} –ª—ñ–¥—ñ–≤`);
    } catch (error) {
        console.log('–§–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π');
        users = new Map();
        leads = new Map();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–æ—Ä—É –ª—ñ–¥—ñ–≤
function collectLead(chatId, user, action) {
    const leadData = {
        chatId: chatId,
        firstName: user.firstName || '–ù–µ–≤—ñ–¥–æ–º–æ',
        username: user.username || '',
        action: action, // 'free_reading', 'consultation_interest', 'question_asked'
        timestamp: new Date().toISOString(),
        readingsCount: leads.has(chatId) ? leads.get(chatId).readingsCount + 1 : 1
    };
    
    leads.set(chatId, leadData);
    
    // –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—ñ–¥–∞
    if (leadData.readingsCount >= 3) {
        bot.sendMessage(ADMIN_CHAT_ID, 
            `üî• –ì–ê–†–Ø–ß–ò–ô –õ–Ü–î!\n\nüë§ ${leadData.firstName} (@${leadData.username})\nüìä –†–æ–∑–∫–ª–∞–¥—ñ–≤: ${leadData.readingsCount}\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–≤'—è–∑–∞—Ç–∏—Å—è!`);
    }
    
    saveUserData();
}

// –§—É–Ω–∫—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
function getRandomCard() {
    return tarotCards[Math.floor(Math.random() * tarotCards.length)];
}

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üîÆ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥', 'üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑'],
            ['‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å', 'üéØ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'],
            ['üìû –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', 'üíé –ü—Ä–æ MiaxiaLip'],
            ['üì∫ –ù–∞—à –∫–∞–Ω–∞–ª', 'üéÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const zodiacKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: '‚ôà –û–≤–µ–Ω', callback_data: 'zodiac_aries' },
                { text: '‚ôâ –¢–µ–ª–µ—Ü—å', callback_data: 'zodiac_taurus' },
                { text: '‚ôä –ë–ª–∏–∑–Ω—é–∫–∏', callback_data: 'zodiac_gemini' }
            ],
            [
                { text: '‚ôã –†–∞–∫', callback_data: 'zodiac_cancer' },
                { text: '‚ôå –õ–µ–≤', callback_data: 'zodiac_leo' },
                { text: '‚ôç –î—ñ–≤–∞', callback_data: 'zodiac_virgo' }
            ],
            [
                { text: '‚ôé –¢–µ—Ä–µ–∑–∏', callback_data: 'zodiac_libra' },
                { text: '‚ôè –°–∫–æ—Ä–ø—ñ–æ–Ω', callback_data: 'zodiac_scorpio' },
                { text: '‚ôê –°—Ç—Ä—ñ–ª–µ—Ü—å', callback_data: 'zodiac_sagittarius' }
            ],
            [
                { text: '‚ôë –ö–æ–∑–µ—Ä—ñ–≥', callback_data: 'zodiac_capricorn' },
                { text: '‚ôí –í–æ–¥–æ–ª—ñ–π', callback_data: 'zodiac_aquarius' },
                { text: '‚ôì –†–∏–±–∏', callback_data: 'zodiac_pisces' }
            ]
        ]
    }
};

// –ê–¥–º—ñ–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
const adminKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üß™ –¢–µ—Å—Ç ChatGPT', callback_data: 'admin_test_gpt' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
            ],
            [
                { text: 'üìù –ü–æ—Å—Ç –∑–∞—Ä–∞–∑', callback_data: 'admin_post_now' },
                { text: 'üë• –õ—ñ–¥–∏', callback_data: 'admin_leads' }
            ],
            [
                { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', callback_data: 'admin_restart' }
            ]
        ]
    }
};

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name || '–î–æ—Ä–æ–≥–∏–π –¥—Ä—É–∂–µ';
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users.set(chatId, {
        firstName: firstName,
        username: msg.from.username || '',
        joinDate: new Date().toISOString(),
        lastActivity: new Date().toISOString()
    });
    
    await saveUserData();
    
    const welcomeMessage = `üåü –ü—Ä–∏–≤—ñ—Ç, ${firstName}! 

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—à—É –¥–æ —Å–≤—ñ—Ç—É –¢–∞—Ä–æ –∑ MiaxiaLip! üîÆ

‚ú® –©–æ –º–æ–∂—É –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏—Ç–∏:
‚Ä¢ üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ
‚Ä¢ üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
‚Ä¢ ‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞ –≤–∞—à–∏–º –∑–Ω–∞–∫–æ–º  
‚Ä¢ üéØ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è

üéÅ **–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:** –ø–µ—Ä—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!

üí´ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è!`;

    await bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
    
    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await bot.sendMessage(ADMIN_CHAT_ID, `üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${firstName} (@${msg.from.username || '–±–µ–∑ username'})`);
});

// –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
bot.onText(/\/admin/, async (msg) => {
    if (msg.chat.id.toString() === ADMIN_CHAT_ID) {
        await bot.sendMessage(ADMIN_CHAT_ID, 'üëë –ü–∞–Ω–µ–ª—å –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', adminKeyboard);
    }
});

bot.onText(/\/test_gpt/, async (msg) => {
    if (msg.chat.id.toString() === ADMIN_CHAT_ID) {
        await testChatGPT(bot, msg.chat.id);
    } else {
        await bot.sendMessage(msg.chat.id, '‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É');
    }
});

bot.onText(/\/post_now/, async (msg) => {
    if (msg.chat.id.toString() === ADMIN_CHAT_ID) {
        try {
            await sendSmartPost(bot, CHANNEL_ID);
            await bot.sendMessage(msg.chat.id, '‚úÖ –†–æ–∑—É–º–Ω–∏–π –ø–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
        } catch (error) {
            await bot.sendMessage(msg.chat.id, `‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        }
    } else {
        await bot.sendMessage(msg.chat.id, '‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É');
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (users.has(chatId)) {
        const user = users.get(chatId);
        user.lastActivity = new Date().toISOString();
        users.set(chatId, user);
    }
    
    switch (text) {
        case 'üîÆ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥':
            await handleFreeReading(chatId);
            break;
            
        case 'üíù –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑':
            await handleLoveReading(chatId);
            break;
            
        case '‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å':
            await bot.sendMessage(chatId, 'üåü –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É:', zodiacKeyboard);
            break;
            
        case 'üéØ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è':
            await handleQuestionPrompt(chatId);
            break;
            
        case 'üìû –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é':
            await handleConsultationRedirect(chatId);
            break;
            
        case 'üíé –ü—Ä–æ MiaxiaLip':
            await handleAbout(chatId);
            break;
            
        case 'üì∫ –ù–∞—à –∫–∞–Ω–∞–ª':
            await handleChannelPromo(chatId);
            break;
            
        case 'üéÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏':
            await handleSpecialPrices(chatId);
            break;
            
        default:
            if (text && !text.startsWith('/')) {
                await handleUserQuestion(chatId, text);
            }
    }
});

// –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = message.chat.id;
    
    // –ê–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏
    if (data.startsWith('admin_') && chatId.toString() === ADMIN_CHAT_ID) {
        switch (data) {
            case 'admin_test_gpt':
                await testChatGPT(bot, chatId);
                break;
                
            case 'admin_stats':
                const stats = await getStatistics();
                const gptStats = getChatGPTStats();
                
                const statsMessage = `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–á**

üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
‚Ä¢ –í—Å—å–æ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.activeToday}
‚Ä¢ –ù–æ–≤—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.newToday}

üéØ **–õ—ñ–¥–∏:**
‚Ä¢ –í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤: ${stats.totalLeads}
‚Ä¢ –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏: ${stats.hotLeads}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: ${stats.conversionRate}%

ü§ñ **ChatGPT:**
‚Ä¢ –í—Å—å–æ–≥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${gptStats.totalGenerated}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${gptStats.successRate}%

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å ChatGPT: ${process.env.OPENAI_API_KEY ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
‚Ä¢ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}`;

                await bot.editMessageText(statsMessage, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    parse_mode: 'Markdown'
                });
                break;
                
            case 'admin_leads':
                const leadsReport = await generateLeadsReport();
                await bot.editMessageText(leadsReport, {
                    chat_id: chatId,
                    message_id: message.message_id,
                    parse_mode: 'Markdown'
                });
                break;
                
            case 'admin_post_now':
                try {
                    await sendSmartPost(bot, CHANNEL_ID);
                    await bot.editMessageText('‚úÖ –†–æ–∑—É–º–Ω–∏–π –ø–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!', {
                        chat_id: chatId,
                        message_id: message.message_id
                    });
                } catch (error) {
                    await bot.editMessageText(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`, {
                        chat_id: chatId,
                        message_id: message.message_id
                    });
                }
                break;
                
            case 'admin_restart':
                await bot.editMessageText('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...', {
                    chat_id: chatId,
                    message_id: message.message_id
                });
                
                await saveUserData();
                setTimeout(() => {
                    process.exit(0);
                }, 2000);
                break;
        }
    }
    
    // –ó–æ–¥—ñ–∞–∫–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
    if (data.startsWith('zodiac_')) {
        const signKey = data.replace('zodiac_', '');
        const sign = zodiacSigns.find(z => z.name.toLowerCase() === getZodiacName(signKey));
        
        if (sign) {
            const horoscope = generateHoroscope(sign);
            await bot.editMessageText(horoscope, {
                chat_id: message.chat.id,
                message_id: message.message_id,
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üîÑ –Ü–Ω—à–∏–π –∑–Ω–∞–∫', callback_data: 'show_zodiac_menu' },
                        { text: 'üìû –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø', url: 'https://theglamstyle.com.ua' }
                    ]]
                }
            });
            
            // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
            if (users.has(message.chat.id)) {
                collectLead(message.chat.id, users.get(message.chat.id), 'horoscope_viewed');
            }
        }
    }
    
    if (data === 'show_zodiac_menu') {
        await bot.editMessageText('üåü –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É:', {
            chat_id: message.chat.id,
            message_id: message.message_id,
            reply_markup: zodiacKeyboard.reply_markup
        });
    }
    
    await bot.answerCallbackQuery(callbackQuery.id);
});

// –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–á

// –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ (–≥–æ–ª–æ–≤–Ω–∏–π –ª—ñ–¥-–º–∞–≥–Ω—ñ—Ç)
async function handleFreeReading(chatId) {
    const cards = [getRandomCard(), getRandomCard(), getRandomCard()];
    
    const reading = `üîÆ **–ë–ï–ó–ö–û–®–¢–û–í–ù–ò–ô –†–û–ó–ö–õ–ê–î –ù–ê –î–ï–ù–¨**

üåÖ **–†–∞–Ω–æ–∫:** ${cards[0].emoji} ${cards[0].name}
${cards[0].meaning}

‚òÄÔ∏è **–î–µ–Ω—å:** ${cards[1].emoji} ${cards[1].name}
${cards[1].meaning}

üåô **–í–µ—á—ñ—Ä:** ${cards[2].emoji} ${cards[2].name}
${cards[2].meaning}

üí´ *–¶–µ–π —Ä–æ–∑–∫–ª–∞–¥ –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—ó –¥–Ω—è!*

üéÅ **–°–ø–æ–¥–æ–±–∞–≤—Å—è —Ä–æ–∑–∫–ª–∞–¥?** –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!`;

    await bot.sendMessage(chatId, reading, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üíù –ó–∞–º–æ–≤–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'ü§ñ –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', url: 'https://t.me/MiaxiaTaro_bot' }]
            ]
        }
    });
    
    // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
    if (users.has(chatId)) {
        collectLead(chatId, users.get(chatId), 'free_reading');
    }
}

// –õ—é–±–æ–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
async function handleLoveReading(chatId) {
    const cards = [getRandomCard(), getRandomCard()];
    
    const reading = `üíù **–õ–Æ–ë–û–í–ù–ò–ô –ü–†–û–ì–ù–û–ó**

üíï **–í–∞—à —Å—Ç–∞–Ω —É –ª—é–±–æ–≤—ñ:** ${cards[0].emoji} ${cards[0].name}
${cards[0].meaning}

üåπ **–©–æ –æ—á—ñ–∫—É—î –≤ —Å—Ç–æ—Å—É–Ω–∫–∞—Ö:** ${cards[1].emoji} ${cards[1].name}
${cards[1].meaning}

‚ú® *–ü–∞–º'—è—Ç–∞–π—Ç–µ: —Å–ø—Ä–∞–≤–∂–Ω—î –∫–æ—Ö–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ª—é–±–æ–≤—ñ –¥–æ —Å–µ–±–µ!*

üíñ **–•–æ—á–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥?** –¢—ñ–ª—å–∫–∏ 280 –≥—Ä–Ω!`;

    await bot.sendMessage(chatId, reading, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üíù –ó–∞–º–æ–≤–∏—Ç–∏ –ª—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'ü§ñ –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', url: 'https://t.me/MiaxiaTaro_bot' }]
            ]
        }
    });
    
    // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
    if (users.has(chatId)) {
        collectLead(chatId, users.get(chatId), 'love_reading');
    }
}

// –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è
async function handleQuestionPrompt(chatId) {
    const promptMessage = `üéØ **–ó–ê–î–ê–ô–¢–ï –í–ê–®–ï –ü–ò–¢–ê–ù–ù–Ø**

–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –≤–∞–º –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏ –¢–∞—Ä–æ!

üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø–∏—Ç–∞–Ω—å:**
‚Ä¢ –ß–∏ –≤–∞—Ä—Ç–æ –º—ñ–Ω—è—Ç–∏ —Ä–æ–±–æ—Ç—É?
‚Ä¢ –Ø–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å—Ç–æ—Å—É–Ω–∫–∏?
‚Ä¢ –©–æ –º–µ–Ω–µ —á–µ–∫–∞—î —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?
‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —è —Ä–æ–±–ª—é?

‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º!`;

    await bot.sendMessage(chatId, promptMessage, { parse_mode: 'Markdown' });
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
    userSessions.set(chatId, { waitingForQuestion: true });
}

// –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function handleUserQuestion(chatId, question) {
    const card = getRandomCard();
    
    const response = `üîÆ **–í–Ü–î–ü–û–í–Ü–î–¨ –ù–ê –í–ê–®–ï –ü–ò–¢–ê–ù–ù–Ø**

‚ùì **–ü–∏—Ç–∞–Ω–Ω—è:** "${question}"

üÉè **–ö–∞—Ä—Ç–∞-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:** ${card.emoji} ${card.name}

‚ú® **–ó–Ω–∞—á–µ–Ω–Ω—è:** ${card.meaning}

üí´ **–ü–æ—Ä–∞–¥–∞:** –¶—è –∫–∞—Ä—Ç–∞ —Ä–∞–¥–∏—Ç—å –¥–æ–≤—ñ—Ä—è—Ç–∏ —Å–≤–æ—ó–π —ñ–Ω—Ç—É—ó—Ü—ñ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–µ—Ä—Ü—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ø—Ä–∏—Å–ª—É—Ö–∞—Ç–∏—Å—è –¥–æ –Ω–µ—ó.

üéÅ **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è?** –ü–µ—Ä—à–∞ —Å–µ—Å—ñ—è –≤—Å—å–æ–≥–æ 70 –≥—Ä–Ω!`;

    await bot.sendMessage(chatId, response, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üíé –ó–∞–º–æ–≤–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'ü§ñ –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', url: 'https://t.me/MiaxiaTaro_bot' }],
                [{ text: 'üîÆ –©–µ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'ask_another' }]
            ]
        }
    });
    
    // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
    if (users.has(chatId)) {
        collectLead(chatId, users.get(chatId), 'question_asked');
    }
    
    // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
    userSessions.delete(chatId);
}

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ö–õ–Æ–ß–û–í–ê –§–£–ù–ö–¶–Ü–Ø)
async function handleConsultationRedirect(chatId) {
    const redirectMessage = `üìû **–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø**

üéÅ **–°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –ü–†–û–ü–û–ó–ò–¶–Ü–Ø:** 70 –≥—Ä–Ω –∑–∞–º—ñ—Å—Ç—å 100!

üîÆ **–©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ:**
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –∫–∞—Ä—Ç
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥

‚è±Ô∏è **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:** 20-30 —Ö–≤–∏–ª–∏–Ω
üì± **–§–æ—Ä–º–∞—Ç:** –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–µ–æ

üõí **–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:**`;

    await bot.sendMessage(chatId, redirectMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üåê –ó–∞–º–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'ü§ñ –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ', url: 'https://t.me/MiaxiaTaro_bot' }],
                [{ text: 'üì± –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ Instagram', url: 'https://instagram.com/miaxialip' }]
            ]
        }
    });
    
    // –ó–±–∏—Ä–∞—î–º–æ –ª—ñ–¥
    if (users.has(chatId)) {
        collectLead(chatId, users.get(chatId), 'consultation_interest');
    }
}

// –ü—Ä–æ–º–æ –∫–∞–Ω–∞–ª—É
async function handleChannelPromo(chatId) {
    const channelMessage = `üì∫ **–ù–ê–® TELEGRAM –ö–ê–ù–ê–õ**

üîÆ –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ @MiaxiaLipTarot!

‚ú® **–©–æ –≤–∞—Å —á–µ–∫–∞—î:**
‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –≤—ñ–¥ ChatGPT
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ –ø–æ—Å—Ç–∏ –ø—Ä–æ –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å  
‚Ä¢ –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏
‚Ä¢ –õ—é–±–æ–≤–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è

üéÅ **–ë–æ–Ω—É—Å –¥–ª—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤:** —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥!

üí´ –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É!`;

    await bot.sendMessage(chatId, channelMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì∫ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url: 'https://t.me/MiaxiaLipTarot' }],
                [{ text: 'üì± Instagram', url: 'https://instagram.com/miaxialip' }]
            ]
        }
    });
}

// –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏
async function handleSpecialPrices(chatId) {
    const pricesMessage = `üéÅ **–°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –¶–Ü–ù–ò –î–õ–Ø –í–ê–°**

üíé **–ê–ö–¶–Ü–ô–ù–Ü –ü–†–û–ü–û–ó–ò–¶–Ü–á:**

üî• **1 –ø–∏—Ç–∞–Ω–Ω—è** - 70 –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å 100!)
‚ö° –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ 2-3 –≥–æ–¥–∏–Ω–∏

üíù **–õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥** - 280 –≥—Ä–Ω
üíï –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å—Ç–æ—Å—É–Ω–∫—ñ–≤

üéØ **"–ü—Ä–æ —Å–µ–±–µ"** - 450 –≥—Ä–Ω  
üåü 6 –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è

‚≠ê **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è** - 570 –≥—Ä–Ω
üîÆ –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ

üéÅ **–ë–û–ù–£–°–ò:**
‚Ä¢ –ù–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º -30% 
‚Ä¢ –ó–∞ –ø—ñ–¥–ø–∏—Å–∫—É –≤ Instagram - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –º—ñ–Ω—ñ-—Ä–æ–∑–∫–ª–∞–¥

‚è∞ **–ê–∫—Ü—ñ—è –¥—ñ—î –æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å!**`;

    await bot.sendMessage(chatId, pricesMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üõí –ó–∞–º–æ–≤–∏—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'ü§ñ –ó–∞–º–æ–≤–∏—Ç–∏ –≤ –±–æ—Ç—ñ', url: 'https://t.me/MiaxiaTaro_bot' }]
            ]
        }
    });
}

// –ü—Ä–æ MiaxiaLip
async function handleAbout(chatId) {
    const aboutMessage = `üíé **–ü–†–û MIAXIALIP**

üåü –ü—Ä–∏–≤—ñ—Ç! –Ø –ú—ñ–∞ - –≤–∞—à –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –¢–∞—Ä–æ!

üîÆ **–ú—ñ–π –¥–æ—Å–≤—ñ–¥:**
‚Ä¢ 5+ —Ä–æ–∫—ñ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¢–∞—Ä–æ
‚Ä¢ –ë—ñ–ª—å—à–µ 1000+ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
‚Ä¢ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–æ–∂–Ω–æ–≥–æ
‚Ä¢ –°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó

‚ú® **–ú–æ—è –º—ñ—Å—ñ—è:** 
–î–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–∞–π—Ç–∏ —Å–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö.

üí´ **–©–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î –º–µ–Ω–µ:**
‚Ä¢ –ß–µ—Å–Ω—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏  
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ–Ω–∏

üåà *–¢–∞—Ä–æ - —Ü–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è, –¥–æ—Å—Ç—É–ø–Ω–∏–π –∫–æ–∂–Ω–æ–º—É!*`;

    await bot.sendMessage(chatId, aboutMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì± Instagram', url: 'https://instagram.com/miaxialip' }],
                [{ text: 'üåê –°–∞–π—Ç', url: 'https://theglamstyle.com.ua' }],
                [{ text: 'üìû –ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', url: 'https://t.me/MiaxiaTaro_bot' }]
            ]
        }
    });
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function getZodiacName(key) {
    const mapping = {
        'aries': '–æ–≤–µ–Ω', 'taurus': '—Ç–µ–ª–µ—Ü—å', 'gemini': '–±–ª–∏–∑–Ω—é–∫–∏',
        'cancer': '—Ä–∞–∫', 'leo': '–ª–µ–≤', 'virgo': '–¥—ñ–≤–∞',
        'libra': '—Ç–µ—Ä–µ–∑–∏', 'scorpio': '—Å–∫–æ—Ä–ø—ñ–æ–Ω', 'sagittarius': '—Å—Ç—Ä—ñ–ª–µ—Ü—å',
        'capricorn': '–∫–æ–∑–µ—Ä—ñ–≥', 'aquarius': '–≤–æ–¥–æ–ª—ñ–π', 'pisces': '—Ä–∏–±–∏'
    };
    return mapping[key] || '';
}

function generateHoroscope(sign) {
    const horoscopes = [
        "–°—å–æ–≥–æ–¥–Ω—ñ –∑—ñ—Ä–∫–∏ —Ä–∞–¥—è—Ç—å –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ –¥–æ –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π",
        "–î–µ–Ω—å —Å–ø—Ä–∏—è—Ç–ª–∏–≤–∏–π –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö —Ä—ñ—à–µ–Ω—å —Ç–∞ –∑–º—ñ–Ω",
        "–ó–æ—Å–µ—Ä–µ–¥—å—Ç–µ—Å—å –Ω–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –≥–∞—Ä–º–æ–Ω—ñ—ó —Ç–∞ —Å–ø–æ–∫–æ—ó",
        "–ß–∞—Å –¥–ª—è —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ —Ç–∞ —Å–∞–º–æ–≤–∏—Ä–∞–∂–µ–Ω–Ω—è",
        "–î–æ–≤—ñ—Ä—è–π—Ç–µ —Å–≤–æ—ó–π —ñ–Ω—Ç—É—ó—Ü—ñ—ó - –≤–æ–Ω–∞ –Ω–µ –ø—ñ–¥–≤–µ–¥–µ"
    ];
    
    const horoscope = horoscopes[Math.floor(Math.random() * horoscopes.length)];
    
    return `${sign.emoji} **${sign.name.toUpperCase()}** (${sign.dates})

üåü **–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:**
${horoscope}

üí´ **–©–∞—Å–ª–∏–≤–∏–π –∫–æ–ª—ñ—Ä:** ${getRandomColor()}
üî¢ **–©–∞—Å–ª–∏–≤–µ —á–∏—Å–ª–æ:** ${Math.floor(Math.random() * 9) + 1}

‚ú® *–•–æ—á–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø? –ó–∞–º–æ–≤—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é!*`;
}

function getRandomColor() {
    const colors = ['üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π', 'üü† –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π', 'üü° –ñ–æ–≤—Ç–∏–π', 'üü¢ –ó–µ–ª–µ–Ω–∏–π', 'üîµ –°–∏–Ω—ñ–π', 'üü£ –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π'];
    return colors[Math.floor(Math.random() * colors.length)];
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
async function getStatistics() {
    const totalUsers = users.size;
    const totalLeads = leads.size;
    const activeToday = Array.from(users.values()).filter(user => {
        const lastActivity = new Date(user.lastActivity);
        const today = new Date();
        return lastActivity.toDateString() === today.toDateString();
    }).length;
    
    const hotLeads = Array.from(leads.values()).filter(lead => lead.readingsCount >= 3).length;
    const conversionRate = totalUsers > 0 ? ((totalLeads / totalUsers) * 100).toFixed(1) : 0;
    
    return {
        totalUsers,
        totalLeads,
        hotLeads,
        conversionRate,
        activeToday,
        newToday: Array.from(users.values()).filter(user => {
            const joinDate = new Date(user.joinDate);
            const today = new Date();
            return joinDate.toDateString() === today.toDateString();
        }).length
    };
}

// –ó–≤—ñ—Ç –ø–æ –ª—ñ–¥–∞—Ö
async function generateLeadsReport() {
    const leadsArray = Array.from(leads.values());
    const hotLeads = leadsArray.filter(lead => lead.readingsCount >= 3);
    const recentLeads = leadsArray.filter(lead => {
        const leadDate = new Date(lead.timestamp);
        const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000);
        return leadDate > threeDaysAgo;
    });
    
    let report = `üéØ **–ó–í–Ü–¢ –ü–û –õ–Ü–î–ê–•**

üî• **–ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏ (3+ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤):**\n`;
    
    hotLeads.slice(0, 5).forEach(lead => {
        report += `‚Ä¢ ${lead.firstName} (@${lead.username}) - ${lead.readingsCount} —Ä–æ–∑–∫–ª–∞–¥—ñ–≤\n`;
    });
    
    report += `\nüìà **–û—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ:**\n`;
    recentLeads.slice(0, 5).forEach(lead => {
        report += `‚Ä¢ ${lead.firstName} - ${lead.action}\n`;
    });
    
    report += `\nüìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤: ${leadsArray.length}
‚Ä¢ –ì–∞—Ä—è—á–∏—Ö –ª—ñ–¥—ñ–≤: ${hotLeads.length}
‚Ä¢ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ: ${recentLeads.length}`;
    
    return report;
}

// –©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ (21:00)
cron.schedule('0 21 * * *', async () => {
    const stats = await getStatistics();
    const gptStats = getChatGPTStats();
    
    const statsMessage = `üìä **–©–û–î–ï–ù–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–Ü–î–û–ì–ï–ù–ï–†–ê–¶–Ü–á**

üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
‚Ä¢ –í—Å—å–æ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.activeToday}  
‚Ä¢ –ù–æ–≤—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: ${stats.newToday}

üéØ **–õ—ñ–¥–∏:**
‚Ä¢ –í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤: ${stats.totalLeads}
‚Ä¢ –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏: ${stats.hotLeads}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: ${stats.conversionRate}%

ü§ñ **ChatGPT:**
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${gptStats.successRate}%
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${process.env.OPENAI_API_KEY ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}

üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è: ${stats.newToday > 0 ? '+' : ''}${stats.newToday} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`;

    await bot.sendMessage(ADMIN_CHAT_ID, statsMessage, { parse_mode: 'Markdown' });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    await loadUserData();
    
    // –ó–∞–ø—É—Å–∫ ChatGPT –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤
    scheduleSmartPosts(bot, CHANNEL_ID);
    
    console.log('ü§ñ –ë–æ—Ç –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó MiaxiaLip –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log('üß† ChatGPT –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–Ω–∏–π');
    console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –∑–±–æ—Ä—É –ª—ñ–¥—ñ–≤ –∞–∫—Ç–∏–≤–Ω–∞');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–∏—Ä–∞—î—Ç—å—Å—è');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ChatGPT
    const hasOpenAI = process.env.OPENAI_API_KEY ? '‚úÖ' : '‚ùå';
    console.log(`üîë ChatGPT API: ${hasOpenAI}`);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
    await bot.sendMessage(ADMIN_CHAT_ID, `üöÄ –ë–æ—Ç –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø—É—â–µ–Ω–æ!

üéØ **–†–æ–ª—å:** –ó–±—ñ—Ä –ª—ñ–¥—ñ–≤ + –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É
‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å
üß† ChatGPT: ${hasOpenAI}
üìÖ –†–æ–∑—É–º–Ω—ñ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω—ñ

üìä **–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.size}
‚Ä¢ –õ—ñ–¥—ñ–≤: ${leads.size}

üîó **–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è:**
‚Ä¢ –ö–∞–Ω–∞–ª: ${CHANNEL_ID}
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Üí @MiaxiaTaro_bot
‚Ä¢ –°–∞–π—Ç: theglamstyle.com.ua

–ö–æ–º–∞–Ω–¥–∏:
/admin - –ø–∞–Ω–µ–ª—å –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
/test_gpt - —Ç–µ—Å—Ç ChatGPT
/post_now - –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª`);
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
});

process.on('SIGINT', async () => {
    console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...');
    await saveUserData();
    await bot.sendMessage(ADMIN_CHAT_ID, '‚èπÔ∏è –ë–æ—Ç –ª—ñ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑—É–ø–∏–Ω–µ–Ω–æ');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
startBot();
